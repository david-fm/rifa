---
import Layout from '../layouts/Layout.astro';
import Button from '../components/Button.tsx';
import Input from '../components/Input';


const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  return redirect("/dashboard");
}

---

<Layout title="KingRifa">
	<main class="h-full">
        <form action="/api/auth/signin" class="h-full">
            <div class=" w-full flex justify-center items-center h-full">
                <div class="w-80 flex flex-col justify-center items-center gap-8">
                    <div class="flex flex-col gap-4">
                        <Input placeholder='Usuario o correo' type='email' extraClass='rounded-md' name='email'/>
                        <Input placeholder='Contraseña' type='password' extraClass='rounded-md' name='password'/>
                    </div>
                    <div class="flex flex-col gap-1 items-center">
                        <p class="hidden text-syracuse-orange" id="error"></p>
                        <p>No tienes una cuenta: <a href="register" class=" text-syracuse-orange">Regístrate</a></p>
                        <Button type='submit' text='ENTRAR' extraClass='rounded-sm' client:load>
                    </div>
                </div>
                
                
            </div>
        </form>
	</main>
</Layout>

<script>

function isLocalStorageAvailable() {
    try {
      // Local storage is available if the property exists
      return typeof window.localStorage !== 'undefined';
    } catch (error) {
      // If window.localStorage exists but the user is blocking local
      // storage, the attempting to read the property throws an exception.
      // If this happens, consider local storage not available.
      return false;
    }
  }
const form = document.querySelector('form');
const handleError = (err: any) => {
    const error = document.getElementById('error');
    // if error 500
    if(error)
    {
        error.innerText = 'La contraseña debe tener mayusculas, minusculas, numeros y caracteres especiales (@$!%*?&)';
        error.classList.remove('hidden');
    }
}
form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    //console.log('submit');
    const formData = new FormData(form);
    // send form data
    const res = await fetch('/api/auth/signin', {
        method: 'POST',
        body: formData
    })
    if(res.status !== 200) {
        handleError(res);
        return;
    }
    else{
        res.json().then(data => {
            if(isLocalStorageAvailable()){
                localStorage.setItem('userDetails', JSON.stringify(data));
            }
            window.location.href = '/dashboard';
        })
        
    }
});
</script>